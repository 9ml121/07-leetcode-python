"""
题目描述
公司老板做了一笔大生意，想要给每位员工分配一些奖金，想通过游戏的方式来决定每个人分多少钱。
按照员工的工号顺序，每个人随机抽取一个数字。
1.按照工号的顺序往后排列，遇到第一个数字比自己数字大的，那么，前面的员工就可以获得“距离*数字差值”的奖金。
2.如果遇不到比自己数字大的，就给自己分配随机数数量的奖金。

例如，按照工号顺序的随机数字是：2,10,3。
那么第2个员工的数字10比第1个员工的数字2大，
所以，第1个员工可以获得1*（10-2）=8。第2个员工后面没有比他数字更大的员工，
所以，他获得他分配的随机数数量的奖金，就是10。
第3个员工是最后一个员工，后面也没有比他更大数字的员工，所以他得到的奖金是3。

请帮老板计算一下每位员工最终分到的奖金都是多少钱。

输入描述
第一行n表示员工数量（包含最后一个老板）
第二是每位员工分配的随机数字

输出描述
最终每位员工分到的奖金数量

注：随机数字不重复，员工数量（包含老板）范围1~10000，随机数范围1~100000

用例
输入	3
        2 10 3
输出	8 10 3
说明	无
"""


# todo 单调栈问题: 遇到第一个数字比自己大的
# 1.输入
# n表示员工数量（包含最后一个老板）
n = int(input())
# 每位员工分配的随机数字
nums = list(map(int, input().split()))


# 2.输出：最终每位员工分到的奖金数量
def getResult(nums):
    # 1.按照员工的工号顺序，每个人随机抽取一个数字。员工工号从1开始
    # 2.nums中找下一个更大的数,差值跟自己工号相乘, 找不到就是数字本身, nums元素不重复
    n = len(nums)
    ans = [0] * n
    stack = []

    for i in range(n - 1, -1, -1):
        val = nums[i]
        while stack and val >= stack[-1]:
            stack.pop()

        ans[i] = (stack[-1] - val) * (i + 1) if stack else val
        stack.append(val)

    return ans


# 3.调用算法
if __name__ == '__main__':
    nums = [4, 7, 5, 10, 3]
    print(getResult(nums))
