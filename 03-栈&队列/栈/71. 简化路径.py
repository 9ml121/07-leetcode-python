"""
给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 '/' 开头），请你将其转化为更加简洁的规范路径。

在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；
此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；
两者都可以是复杂相对路径的组成部分。
任意多个连续的斜杠（即，'//'）都被视为单个斜杠 '/' 。
对于此问题，任何其他格式的点（例如，'...'）均被视为文件/目录名称。

请注意，返回的 规范路径 必须遵循下述格式：

始终以斜杠 '/' 开头。
两个目录名之间必须只有一个斜杠 '/' 。
最后一个目录名（如果存在）不能 以 '/' 结尾。
此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 '.' 或 '..'）。
返回简化后得到的 规范路径 。



示例 1：
输入：path = "/home/"
输出："/home"
解释：注意，最后一个目录名后面没有斜杠。

示例 2：
输入：path = "/../"
输出："/"
解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。

示例 3：
输入：path = "/home//foo/"
输出："/home/foo"
解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。

示例 4：
输入：path = "/a/./b/../../c/"
输出："/c"


提示：
1 <= path.length <= 3000
path 由英文字母，数字，'.'，'/' 或 '_' 组成。
path 是一个有效的 Unix 风格绝对路径。
"""
"""
这道题要求我们将一个 Unix 风格的绝对路径转换为规范路径（这里忽略题目中的大段描述）。
输入是一个字符串，在这个字符串里有一些斜杠，这些斜杠表示 目录 或者 操作 的分隔符。

具体来说：
1.如果是英文字母，就表示一个 目录。
2.如果是一个点或者两个点，表示的是 操作。其中一个点 . 表示停留在当前目录，两个点 .. 表示返回上一级目录。

题意分析：从题目的文字说明和 3 个示例中我们知道（看示例理解题意很重要）：
1.规范的路径的 结尾 不能有斜杠；
2.出现两个小圆点 .. 的时候，它前面的那个表示目的字符串可以当做不存在。即：简化的目的是 去掉多余的斜杠和目录 。

我们再分析一下：题目为什么需要我们简化它呢？
原因是有 .. 表示返回上一级目录。

例如：/a/b/../.. 这个表示路径的字符串，表示先进入目录 a 再进入目录 b ，
然后遇到两个.. 回到它的父目录，也就是回到了目录 a ，
然后又遇到两个.. 回到它的父目录，也就是回到了根目录 / ，
那么这个路径就被简化为一个斜杠 /。题目要我们返回这个斜杠。


"""

# 写法1
class Solution:
    def simplifyPath(self, path: str) -> str:
        # 栈用来保存简化路径中的文件名称
        stack = []
        for p in path.split('/'):
            # 1. '..'表示返回上一级，stack需要清空最后一个文件
            if p == '..':
                if stack:
                    stack.pop()
                    
             # 2. ‘.’表示当前目录，另外还有空路径，都需要跳过
            elif p and p != '.':
                stack.append(p)
        
        # 输出最后简化路径结果，以'/'开头
        return '/' + '/'.join(stack)


# 写法2
class Solution2:
    def simplifyPath(self, path: str) -> str:
        # 返回更加简洁的规范路径。
        stack = []
        path_list = path.split('/')
        for p in path_list:
            if p == '..':
                if stack:
                    stack.pop()
                continue
            if p == '.' or p == '':
                continue
            
            stack.append(p)
        return '/' + '/'.join(stack)
