"""
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。



示例 1：

输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
示例 2：

输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
示例 3：

输入：nums = [11,13,15,17]
输出：11
解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。


提示：

n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums 中的所有整数 互不相同
nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转
"""
from typing import List

"""
循环5次的情况如下：
1 2 3 4 5
5 1 2 3 4
4 5 1 2 3
3 4 5 1 2
2 3 4 5 1
左、中、右三个位置的值相比较，有以下几种情况：
1.左值 < 中值, 中值 < 右值 ：没有旋转，最小值在最左边，可以收缩右边界  12345
2.左值 > 中值, 中值 < 右值 ：有旋转，最小值在左半边，可以收缩右边界  51234  45123
3.左值 < 中值, 中值 > 右值 ：有旋转，最小值在右半边，可以收缩左边界  34512  23451
4.左值 > 中值, 中值 > 右值 ：单调递减，不可能出现
"""


class Solution:
    def findMin(self, nums: List[int]) -> int:
        # 左闭右闭区间，如果用右开区间则不方便判断右值
        left, right = 0, len(nums) - 1
        # 循环不变式是left < right, 并且要保证左闭右开区间里面始终套住最小值。
        while left < right:
            # 向下取整，mid更靠近left，并且在循环体中mid始终小于right
            mid = (left + right) // 2
            if nums[mid] > nums[right]:
                # nums[mid] > nums[right] mid左边有序，最小值在中值右边， 因为在旋转数组中，最小值一定在无序的区间
                left = mid + 1
            else:
                #  nums[mid] <= nums[right] mid右边有序， 最小值在中值左边，或者就是中值
                right = mid
        # 循环结束，left == right，最小值输出nums[left]或nums[right]均可
        return nums[left]


"""
为什么比较mid和right?
这个二分的目的，是将目标最小值套住，通过判断mid与左右的大小关系，将单调递增的那部分去除掉，最后剩下的就是不连续的那个点

如果我们是mid 比较 right，因为是找最小值，如果mid < right，立即能判断出来mid到right之间都递增，
    最小值必不在其中(mid仍可能)，因为在旋转数组中，最小值一定在无序的区间, 因此能移动right。
但如果left < mid，左侧递增，你能直接排除left到mid吗?
    并不能，因为最小数可能就在left上，你无法据此把这部分排除出去。
"""
