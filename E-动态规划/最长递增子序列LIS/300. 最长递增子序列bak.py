"""
给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。
子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。
例如，[3,6,2,7] 是数组 [0,3,1,6,2,2,7] 的子序列。

示例 1：
输入：nums = [10,9,2,5,3,7,101,18]
输出：4
解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。

示例 2：
输入：nums = [0,1,0,3,2,3]
输出：4

示例 3：
输入：nums = [7,7,7,7,7,7,7]
输出：1


提示：
1 <= nums.n <= 2500
-104 <= nums[i] <= 104


进阶：
你能将算法的时间复杂度降低到 O(n log(n)) 吗?
"""
from typing import List


# todo 说明：03专题有此题的更优解(耐心排序)，这里只思考如何找动态规划的状态转移方程式
def lengthOfLIS(nums: List[int]) -> int:
    # nums数组是无序的，问题是找nums中最长的递增子序列，不需要连续
    # 比如1 5 2 4 6 最长的是1246，比156长度大一
    # 记录前面每个数的递增最大长度，后面一个数只要比他大，dp[i] = dp[i-1] + 1

    # todo 定义dp: dp[i]代表nums[i]结尾出现的最大递增长度
    n = len(nums)
    dp = [1] * n
    # base case: dp[i] 初始值为 1，因为以 nums[i] 结尾的最长递增子序列起码要包含它自己。
    dp[0] = 1

    # todo 求的是dp数组中值最大的那个数，即max(dp)
    # 从第1个数开始,找nums前面比他小的数的值dp[i]+1，取其中最大值
    for i in range(1, n):
        for j in range(i):
            if nums[j] < nums[i]:
                dp[i] = max(dp[j] + 1, dp[i])

    return max(dp)


if __name__ == '__main__':
    # nums = [1,5,3,4,6]
    nums = [10, 9, 2, 5, 3, 7, 101, 18]
    print(lengthOfLIS(nums))
