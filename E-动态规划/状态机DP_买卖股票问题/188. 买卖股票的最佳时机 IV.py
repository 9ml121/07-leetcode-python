"""
给定一个整数数组 prices ，它的第 i 个元素 prices[i] 是一支给定的股票在第 i 天的价格，和一个整型 k 。
设计一个算法来计算你所能获取的最大利润。你最多可以完成 k 笔交易。也就是说，你最多可以买 k 次，卖 k 次。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1：

输入：k = 2, prices = [2,4,1]
输出：2
解释：在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。
示例 2：

输入：k = 2, prices = [3,2,6,5,0,3]
输出：7
解释：在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。
     随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。


提示：
0 <= k <= 100
0 <= prices.n <= 1000
0 <= prices[i] <= 1000
"""
from typing import List

# todo 多状态dp
class Solution:
    def maxProfit(self, k: int, prices: List[int]) -> int:
        # 手头最多1只股票，最多可以有k笔交易， 返回可以获得的最大利润
        dp = [[0] * k * 2 for _ in range(len(prices))]
        '''
        注意：手头最多只能持有1只股票,总共k次交易，每次交易有买和卖2个状态
        dp[i][0] 第i天手头有1号股票：
        dp[i][1] 第i天手头没有1号股票：
        dp[i][2] 第i天手头有2号股票，
        dp[i][3] 第i天手头没有2号股票，
        ...
        '''
        
        # 乙： 今天是第一天---------------------------------------------
        # 乙： 第一次买股票是吧，prices[0]块钱拿去，今天股票我买了
        # 乙： 第一次卖股票是吧，prices[0]块钱买来又卖掉，血赚0元
        # 乙： 第二次买，我买了又卖掉又买回来，花费prices[0]块钱
        # 乙： 第二次卖，我买了又卖掉又买回来又卖掉，哎，就是玩
        # 注： 在同一天内反复买卖是不影响最终结果的，因为反正都是0
        for i in range(k * 2):
            if i % 2 == 0:
                dp[0][i] = -prices[0]
            else:
                dp[0][i] = 0

        # 从第二天起：
        for i in range(1, len(prices)):
            for j in range(k * 2):
                if j == 0:
                    # 第一次操作，只能买股票
                    dp[i][0] = max(dp[i - 1][j], -prices[i])
                elif j % 2 == 0:
                    # 买股票：1：可能是之前花低价买的，2.也可能今天买(收益要加上之前卖的股票所得)
                    dp[i][j] = max(dp[i - 1][j], -prices[i] + dp[i - 1][j - 1])
                else:
                    # 卖股票:1.可能是之前高价卖的 2.也可能是今天卖掉(收益要加上之前买的股票成本)
                    dp[i][j] = max(dp[i - 1][j], prices[i] + dp[i - 1][j - 1])
        
        return dp[-1][-1]


if __name__ == '__main__':
    cls = Solution()
    prices = [3, 3, 5, 0, 0, 3, 1, 4]
    k = 2
    print(cls.maxProfit(k, prices))
