"""
给定一个整数数组prices，其中第  prices[i] 表示第 i 天的股票价格 。​

设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:

卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)。
注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。


示例 1:
输入: prices = [1,2,3,0,2]
输出: 3
解释: 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]

示例 2:
输入: prices = [1]
输出: 0


提示：

1 <= prices.length <= 5000
0 <= prices[i] <= 1000
"""
from typing import List


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        # 手头最对一只股票，可以多次买卖，卖掉股票有1天的冻结期，返回可以获得的最大收益
        n = len(prices)
        # dp[i][0]代表第i天过后手上有股票时的最大收益
        # dp[i][1]代表第i天过后手上无股票, 且当天没有卖出的最大收益
        # dp[i][2]代表第i天过后手上无股票, 且当天有卖出的最大收益
        dp = [[0, 0, 0] for _ in range(n)]
        dp[0] = [-prices[0], 0, 0]

        for i in range(1, n):
            # 1.有股票：之前买的，或者今天买(昨天没有股票，且昨天没有卖出)
            dp[i][0] = max(dp[i - 1][0], - prices[i] + dp[i - 1][1])
            # 2.没有股票，今天没卖
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][2])
            # 3.没有股票，今天卖出
            dp[i][2] = prices[i] + dp[i][0]

        # print(dp)
        # [[-1, 0, 0], [-1, 0, 1], [-1, 1, 2], [1, 2, 1], [1, 2, 3]]
        return max(dp[n - 1][1], dp[n - 1][2])


if __name__ == '__main__':
    prices = [1, 2, 3, 0, 2]
