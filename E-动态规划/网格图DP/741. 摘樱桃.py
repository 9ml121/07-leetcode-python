"""
给你一个 n x n 的网格 grid ，代表一块樱桃地，每个格子由以下三种数字的一种来表示：

0 表示这个格子是空的，所以你可以穿过它。
1 表示这个格子里装着一个樱桃，你可以摘到樱桃然后穿过它。
-1 表示这个格子里有荆棘，挡着你的路。
请你统计并返回：在遵守下列规则的情况下，能摘到的最多樱桃数：

从位置 (0, 0) 出发，最后到达 (n - 1, n - 1) ，只能向下或向右走，并且只能穿越有效的格子（即只可以穿过值为 0 或者 1 的格子）；
当到达 (n - 1, n - 1) 后，你要继续走，直到返回到 (0, 0) ，只能向上或向左走，并且只能穿越有效的格子；
当你经过一个格子且这个格子包含一个樱桃时，你将摘到樱桃并且这个格子会变成空的（值变为 0 ）；
如果在 (0, 0) 和 (n - 1, n - 1) 之间不存在一条可经过的路径，则无法摘到任何一个樱桃。
 

示例 1：


输入：grid = [[0,1,-1],[1,0,-1],[1,1,1]]
输出：5
解释：玩家从 (0, 0) 出发：向下、向下、向右、向右移动至 (2, 2) 。
在这一次行程中捡到 4 个樱桃，矩阵变成 [[0,1,-1],[0,0,-1],[0,0,0]] 。
然后，玩家向左、向上、向上、向左返回起点，再捡到 1 个樱桃。
总共捡到 5 个樱桃，这是最大可能值。
示例 2：

输入：grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
输出：0
 

提示：

n == grid.length
n == grid[i].length
1 <= n <= 50
grid[i][j] 为 -1、0 或 1
grid[0][0] != -1
grid[n - 1][n - 1] != -1
"""


from functools import cache
from math import inf
from typing import List

# 方法 1：专题1-把X变成Y
"""
一、寻找子问题
从左上角 (0,0) 走到右下角 (n−1,n−1)，再走回到左上角 (0,0)，相当于有两条从 (0,0) 到 (n−1,n−1) 的路径。
我们要计算的，是这两条路径的并集上的樱桃个数的最大值。

如果只有一条路径，我们可以像 LCR 166. 珠宝的最高价值 那样，定义子问题为：从 (0,0) 到 (i,j) 可以得到的樱桃个数的最大值。
有两条路径要怎么做呢？

跑两次 DP？先走一遍最优路径（把 1 改成 0），再走一遍剩下的最优路径？这个做法是错的，反例，这个反例可以取到所有樱桃，但两次 DP 的做法没法取到所有樱桃。
所以必须同时考虑两条路径。

为方便描述，假设有两个人 A 和 B，都从 (0,0) 走到右下角 (n−1,n−1)。
假设 n=3，如果 A 最后一步从 (2,1) 走到 (2,2)，B 最后一步从 (1,2) 走到 (2,2)，我们需要计算两人从 (0,0) 分别走到 (2,1) 和 (1,2)，路径并集的樱桃个数的最大值。

虽然说，这是一个和原问题相似的子问题，但两条路径并不是互相独立的，同一个格子上的樱桃只能统计一次，我们需要考虑同一个格子重复经过的情况。
如果把子问题定义成：从 (0,0) 出发，A 走了 p 步，B 走了 q 步，分别走到 (i1,j1) 和 (i2,j2) 可以得到的樱桃个数的最大值。

在 p!=q 的情况下，比如 p<q，A 不知道哪些格子 B 已经走过了，无法计算重复经过的情况。
所以，把子问题定义成两个人都走了同样的步数，也就是 p=q 的情况，才能直接计算出重复经过的情况，也就是两人走到同一个格子。

在上面的例子中，我们需要计算两人从 (0,0) 出发，都走了 3 步，分别走到 (2,1) 和 (1,2)，可以得到的樱桃个数的最大值。

作者：灵茶山艾府
链接：https://leetcode.cn/problems/cherry-pickup/solutions/2766975/jiao-ni-yi-bu-bu-si-kao-dpcong-ji-yi-hua-ruue/
"""


class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果（记忆化）
        def dfs(t: int, j: int, k: int) -> int:
            #  dfs(t,j,k) 表示两人从 (0,0) 出发，都走了 t 步，分别走到 (t−j,j) 和 (t−k,k)，可以得到的樱桃个数的最大值。
            # 不能出界，不能访问 -1 格子
            if j < 0 or k < 0 or t < j or t < k or grid[t - j][j] < 0 or grid[t - k][k] < 0:
                return -inf

            if t == 0:  # 此时 j = k = 0
                return grid[0][0]

            return max(
                # A 往下走，B 往下走,那么问题变成两人从 (0,0) 出发，都走了 t−1 步，分别走到 (t−1−j,j) 和 (t−1−k,k)，可以得到的樱桃个数的最大值
                dfs(t - 1, j, k),
                # A 往下走，B 往右走,那么问题变成两人从 (0,0) 出发，都走了 t−1 步，分别走到 (t−1−j,j) 和 (t−k,k−1)，可以得到的樱桃个数的最大值
                dfs(t - 1, j, k - 1),
                # A 往右走，B 往下走,那么问题变成两人从 (0,0) 出发，都走了 t−1 步，分别走到 (t−j,j−1) 和 (t−1−k,k)，可以得到的樱桃个数的最大值
                dfs(t - 1, j - 1, k),
                # A 往右走，B 往右走，那么问题变成两人从 (0,0) 出发，都走了 t−1 步，分别走到 (t−j,j−1) 和 (t−k,k−1)，可以得到的樱桃个数的最大值
                dfs(t - 1, j - 1, k - 1)) + \
                grid[t - j][j] + (grid[t - k][k] if k != j else 0)
                # 这四种情况取最大值，再加上 grid[t−j][j] 和 grid[t−k][k]（两人位置重合时只加一个）

        n = len(grid)
        # 每个人都要走 n*2-2步才能从[n-1,n-1]到[0,0]
        # 如果答案小于 0，说明路被荆棘（−1）挡住了，无法摘到任何一个樱桃，返回 0。
        return max(dfs(n * 2 - 2, n - 1, n - 1), 0)

# 方法 2：动态规划


class Solution:
    def cherryPickup(self, grid: List[List[int]]) -> int:
        n = len(grid)

        # f[t][j][k]表示两人从 (0,0) 出发，都走了 t 步，分别走到 (t−j,j) 和 (t−k,k)，可以得到的樱桃个数的最大值。
        # 每个人都要走 n*2-2步才能从[0,0]到[n-1,n-1]
        f = [[[-inf] * (n + 1) for _ in range(n + 1)]
             for _ in range(n * 2 - 1)]
        f[0][1][1] = grid[0][0]

        for t in range(1, n * 2 - 1):
            for j in range(max(t - n + 1, 0), min(t + 1, n)):  # t +1 <= n
                if grid[t - j][j] < 0:
                    continue
                for k in range(j, min(t + 1, n)):
                    if grid[t - k][k] == -1:
                        continue
                    f[t][j + 1][k + 1] = max(f[t - 1][j + 1][k + 1],
                                             f[t - 1][j + 1][k],
                                             f[t - 1][j][k + 1],
                                             f[t - 1][j][k]) + \
                        grid[t - j][j] + (grid[t - k][k] if k != j else 0)
        return max(f[-1][n][n], 0)
