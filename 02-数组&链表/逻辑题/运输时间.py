"""
题目解析和算法源码
https://fcqian.blog.csdn.net/article/details/135230558?spm=1001.2014.3001.5502

题目描述
M（1 ≤ M ≤ 20）辆车需要在一条不能超车的单行道到达终点，起点到终点的距离为 N（1 ≤ N ≤ 400）。

速度快的车追上前车后，只能以前车的速度继续行驶，求最后一辆车到达目的地花费的时间。

注：每辆车固定间隔 1 小时出发，比如第一辆车 0 时出发，第二辆车 1 时出发，依次类推

输入描述
第一行两个数字：M N，分别代表车辆数和到终点的距离，以空格分隔

接下来 M 行，每行一个数字 S，代表每辆车的速度。0 < S < 30

输出描述
最后一辆车到达目的地花费的时间

用例1
输入
2 11
3
2
输出
5.5
说明
2辆车，距离11，0时出发的车速度快，1时出发的车，到达目的地花费5.5
"""


# 获取输入
n, s = map(int, input().split())
speeds = [int(input()) for _ in range(n)]

# 算法


def main():
    # 后面速度快的车，在追上前面慢车之后，会同时到达终点
    # 也就是说后面快车跑完全程，如果花的时间小于前面慢车，结束时间还是前面慢车跑完的结束时间
    t = 0  # 前面车跑完全程的结束时间
    for i, v in enumerate(speeds):
        t = max(t, s/v + i)

    cost = t - (n-1)
    # 如果cost是整数，返回整数，如果是小数，保留三位小数点
    return round(cost, 3) if cost > int(cost) else int(cost)


print(main())
