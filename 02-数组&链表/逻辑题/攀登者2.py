"""
题目解析和算法源码
https://fcqian.blog.csdn.net/article/details/134639750?spm=1001.2014.3001.5502

题目描述
攀登者喜欢寻找各种地图，并且尝试攀登到最高的山峰。

地图表示为一维数组，数组的索引代表水平位置，数组的元素代表相对海拔高度。其中数组元素0代表地面。

例如：[0,1,2,4,3,1,0,0,1,2,3,1,2,1,0]，代表如下图所示的地图，地图中有两个山脉位置分别为 1,2,3,4,5 和 8,9,10,11,12,13，最高峰高度分别为 4,3。最高峰位置分别为3,10。

一个山脉可能有多座山峰(高度大于相邻位置的高度，或在地图边界且高度大于相邻的高度)。

image

登山时会消耗登山者的体力(整数)，

上山时，消耗相邻高度差两倍的体力
下山时，消耗相邻高度差一倍的体力
平地不消耗体力
登山者体力消耗到零时会有生命危险。

例如，上图所示的山峰：

从索引0，走到索引1，高度差为1，需要消耗 2 * 1 = 2 的体力，
从索引2，走到索引3，高度差为2，需要消耗 2 * 2 = 4 的体力。
从索引3，走到索引4，高度差为1，需要消耗 1 * 1 = 1 的体力。
攀登者想要评估一张地图内有多少座山峰可以进行攀登，且可以安全返回到地面，且无生命危险。

例如上图中的数组，有3个不同的山峰，登上位置在3的山可以从位置0或者位置6开始，从位置0登到山顶需要消耗体力 1 * 2 + 1 * 2 + 2 * 2 = 8，从山顶返回到地面0需要消耗体力 2 * 1 + 1 * 1 + 1 * 1 = 4 的体力，按照登山路线 0 → 3 → 0 需要消耗体力12。攀登者至少需要12以上的体力（大于12）才能安全返回。

输入描述
第一行输入为地图一维数组

第二行输入为攀登者的体力

输出描述
确保可以安全返回地面，且无生命危险的情况下，地图中有多少山峰可以攀登。

用例1
输入
0,1,4,3,1,0,0,1,2,3,1,2,1,0
13
输出
3
说明
登山者只能登上位置10和12的山峰，7 → 10 → 7，14 → 12 → 14

用例2
输入
1,4,3
999
输出
0
说明
没有合适的起点和终点


"""


# 1. 获取输入
# 第一行输入为地图一维数组
heights = list(map(int, input().split(',')))
# 第二行输入为攀登者的体力
limit = int(input())

# 3.统计正向或者负向可以到达的山峰下标
# 可以攀登的山峰下标集合
ans = set()
# 0 3 1 2 1 3 0
def climb(heights: list, direction: bool):
    n = len(heights)
    # a. 先找到第一个地面下标
    i = 0
    while i < n and heights[i] != 0:
        i += 1

    # b.计算相邻位置的高度差和上下山消耗的体力数，并判断是否为山峰，并统计消耗的体力
    cost = 0
    for j in range(i+1, n):
        # c. 如果当前下标是地面，cost要恢复0开始计算
        if heights[j] == 0:
            cost = 0
            continue

        diff = heights[j] - heights[j-1]
        # d.只要按照原路上下山，不管是上山路，还是下山路，消耗的体力都是abs(diff) * 3
        cost += abs(diff) * 3
        # 判断是否为山峰，cost是否小于limit
        if diff > 0:
            if j+1 == n or heights[j] > heights[j+1]:
                # j是山峰
                if cost < limit:
                    # 正向，还是逆向
                    if not direction:
                        ans.add(j)
                    else:
                        ans.add(n-1-j)
    # print(ans)


# 2.确保可以安全返回地面，且无生命危险的情况下，地图中有多少山峰可以攀登。
# 正向攀登
climb(heights, False)
# 逆向攀登
heights.reverse()
climb(heights, True)
# 结果集合的长度就是可以攀登的山峰数量
print(len(ans))
