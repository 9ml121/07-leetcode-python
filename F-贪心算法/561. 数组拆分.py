"""
给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，
使得从 1 到 n 的 min(ai, bi) 总和最大。

返回该 最大总和 。

示例 1：
输入：nums = [1,4,3,2]
输出：4
解释：所有可能的分法（忽略元素顺序）为：
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
所以最大总和为 4

示例 2：
输入：nums = [6,2,6,5,1,2]
输出：9
解释：最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9


提示：

1 <= n <= 104
nums.length == 2 * n
-104 <= nums[i] <= 104
"""
from typing import List

# 方法 1：贪心算法
"""
「贪心算法」的直觉：
配对的两个数里，较大的数会被「消去」，所以输入数组里最大的数一定会被消去，为了得到「配对以后取最小、最小值的和最大」的结果，
需要让「倒数第二大的数」和「最大的数」配对，好让「倒数第二大的数」作为一个加法项被保留；

解决了上述问题以后，问题就转化为「剩下的 2×n−2 个数的配对问题」。可以按照上一点的描述让「倒数第三大的数」和「倒数第四大的数」配对，
「倒数第三大的数」一定会被消去，而「倒数第四大的数」作为一个加法项被保留。

「贪心选择性质」的证明：可以使用反证法
"""


class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        nums.sort()
        res = 0
        for i in range(0, len(nums), 2):
            res += nums[i]

        return res
