"""
给你一个 非空 整数数组 nums ，除了某个元素只出现一次以外，其余每个元素均出现两次。
找出那个只出现了一次的元素。

你必须设计并实现线性时间复杂度的算法来解决此问题，且该算法只使用常量额外空间。

示例 1 ：
输入：nums = [2,2,1]
输出：1

示例 2 ：
输入：nums = [4,1,2,1,2]
输出：4

示例 3 ：
输入：nums = [1]
输出：1


提示：
1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
除了某个元素只出现一次以外，其余每个元素均出现两次。
"""
from typing import List


"""
todo 异或运算 ^  XOR
两个数字进行异或运算时，它们的二进制表示进行逐位比较。如果两个对应位的数字相同，则结果为0；如果不同，则结果为1

异或运算的性质是需要我们牢记的：
● 一个数和它本身做异或运算结果为 0，即 a ^ a = 0；
● 一个数和 0 做异或运算的结果为它本身，即 a ^ 0 = a。
"""


class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        # nums 除了某个元素只出现一次以外，其余每个元素均出现两次,找出那个出现一次的元素
        ans = 0
        for num in nums:
            ans ^= num 

        return ans
