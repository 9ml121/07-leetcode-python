"""
给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。

如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。

 

示例 1：

输入：n = 1
输出：true
解释：20 = 1
示例 2：

输入：n = 16
输出：true
解释：24 = 16
示例 3：

输入：n = 3
输出：false
 

提示：

-2^31 <= n <= 2^31 - 1
 

进阶：你能够不使用循环/递归解决此问题吗？
"""


# todo n & (n-1) 这个操作在算法中比较常见，作用是消除数字 n 的二进制表示中的最后一个 1。
# 342. 4的幂.py
"""
解题思路：
若 n=2^x  且 x 为自然数（即 n 为 2 的幂），则一定满足以下条件：
1.恒有 n & (n - 1) == 0，这是因为：
    n 二进制最高位为 1，其余所有位为 0；
    n−1 二进制最高位为 0，其余所有位为 1；
2.一定满足 n > 0。
因此，通过 n > 0 且 n & (n - 1) == 0 即可判定是否满足 n=2^x。

2**x    n	    n - 1	n & (n - 1)
2**0    0001	0000	(0001) & (0000) == 0
2**1    0010	0001	(0010) & (0001) == 0
2**2    0100	0011	(0100) & (0011) == 0
2**3    1000	0111	(1000) & (0111) == 0
...	    ...	    ...	    ...
"""


class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        return n > 0 and n & (n - 1) == 0


# 使用循环
class Solution:
    def isPowerOfTwo(self, n: int) -> bool:
        if n <= 0:
            return False

        while n > 1:
            if n & 1 == 1:
                return False
            n >>= 1

        return True
