"""
题目描述
给定一个字符串s，找出这样一个子串：

该子串中任意一个字符最多出现2次
该子串不包含指定某个字符
请你找出满足该条件的最长子串的长度

输入描述
第一行为：要求不包含的指定字符，为单个字符，取值范围[0-9a-zA-Z]
第二行为：字符串s，每个字符范围[0-9a-zA-Z]，长度范围[1, 10000]

输出描述
一个整数，满足条件的最长子串的长度；
如果不存在满足条件的子串，则返回0

用例
输入	D
    ABC132
输出	6
说明	无

输入	D
    ABACA123D
输出	7
说明	无
"""

'''
滑动窗口
'''
# 1.获取输入
ex = 'D'
# s = '1ABACA123D'
s = 'ABC132'

# 2.算法逻辑
i = 0
j = 0
dicCnt = {}
res = 0
while j < len(s):
    ch = s[j]
    dicCnt[ch] = dicCnt.get(ch, 0) + 1
    # 1.该子串不包含指定某个字符: 左右指针都切到排除字符后面,并且字典要清空
    if ch == ex:
        res = max(res, j - i)  # 先记录结果
        j += 1
        i = j
        dicCnt.clear()

    # 2.该子串中任意一个字符最多出现2次:  停止右指针，左指针右滑,直到窗口移除掉大于2的这个字符
    if dicCnt.get(ch, 0) > 2:
        res = max(res, j-i)   # 先记录结果
        while dicCnt[ch] > 2:
            dicCnt[s[i]] -= 1  # 更新字典
            i += 1

    j += 1
# print(j)
# 如果s全部都符合？这里要对最后一次滑窗做记录
res = max(res, j-i)
print(res)