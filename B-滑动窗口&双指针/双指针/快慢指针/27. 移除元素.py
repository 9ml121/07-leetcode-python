"""
给你一个数组 nums 和一个值 value，你需要 原地 移除所有数值等于 value 的元素，并返回移除后数组的新长度。

不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。



说明:
为什么返回数值是整数，但输出的答案是数组呢?
请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

你可以想象内部操作如下:
// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
int len = removeElement(nums, val);

// 在函数里修改输入数组对于调用者是可见的。
// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
for (int i = 0; i < len; i++) {
    print(nums[i]);
}


示例 1：
输入：nums = [3,2,2,3], value = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
你不需要考虑数组中超出新长度后面的元素。
例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。

示例 2：
输入：nums = [0,1,2,2,3,0,4,2], value = 2
输出：5, nums = [0,1,4,0,3]
解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。


提示：
0 <= nums.n <= 100
0 <= nums[i] <= 50
0 <= value <= 100
"""
from typing import List


'''
这道题的另外一种描述形式：
给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

请注意 ，必须在不复制数组的情况下原地对数组进行操作。

示例 1:

输入: nums = [0,1,0,3,12]
输出: [1,3,12,0,0]
示例 2:

输入: nums = [0]
输出: [0]
提示:

1 <= nums.length <= 10^4
-2^31 <= nums[i] <= 2^31 - 1
进阶：你能尽量减少完成的操作次数吗？
'''

# todo 简单的 快慢指针
# 类似：A-滑动窗口&双指针\双指针\26. 删除有序数组中的重复项.py


class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        """原地移除nums数组中数值为val的元素,返回移除后数组长度"""
        
        # nums[0..l)为移除val之后的数组, l指向下一个要赋值的元素下标, 最后新数组长度为l
        l = 0
        for r, num in enumerate(nums):
            if num != val:
                nums[l] = num
                l += 1

        return l
