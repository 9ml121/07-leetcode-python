"""
给定一个长度为 n 的整数数组 height 。有 n 条垂线，第 i 条线的两个端点是 (i, 0) 和 (i, height[i]) 。

找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

返回容器可以储存的最大水量。

说明：你不能倾斜容器。


示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

示例 2：
输入：height = [1,1]
输出：1


提示：

n == height.length
2 <= n <= 105
0 <= height[i] <= 104
"""
from typing import List

"""
类似：A-滑动窗口&双指针\双指针\42. 接雨水.py
区别在于：接雨水问题给出的类似一幅直方图，每个横坐标都有宽度，而本题给出的每个坐标是一条竖线，没有宽度。
接雨水问题更难一些，每个坐标对应的矩形通过左右的最大高度的最小值推算自己能装多少水：

本题可完全套用接雨水问题的思路，相对还更简单：
用 left 和 right 两个指针从两端向中心收缩，一边收缩一边计算 [left, right] 之间的矩形面积，取最大的面积值即是答案。
"""

# todo 考察左右双指针
class Solution:
    def maxArea(self, height: List[int]) -> int:
        # 返回容器可以储存的最大水量。
        ans = 0
        n = len(height)
        
        l, r = 0, n - 1 
        while l < r:
            # 计算[l..r]2个柱子之间的面积
            cur_area = min(height[l], height[r]) * (r - l)
            ans = max(ans, cur_area)
            
            # todo 左右双指针，每轮向内移动短板，这样可以保证消去的状态不会导致最大面积丢失
            if height[l] <= height[r]:
                l += 1
            else:
                r -= 1

        return ans
